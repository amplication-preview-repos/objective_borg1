/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ImportHeader as PrismaImportHeader } from "@prisma/client";

export class ImportHeaderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ImportHeaderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.importHeader.count(args);
  }

  async importHeaders(
    args: Prisma.ImportHeaderFindManyArgs
  ): Promise<PrismaImportHeader[]> {
    return this.prisma.importHeader.findMany(args);
  }
  async importHeader(
    args: Prisma.ImportHeaderFindUniqueArgs
  ): Promise<PrismaImportHeader | null> {
    return this.prisma.importHeader.findUnique(args);
  }
  async createImportHeader(
    args: Prisma.ImportHeaderCreateArgs
  ): Promise<PrismaImportHeader> {
    return this.prisma.importHeader.create(args);
  }
  async updateImportHeader(
    args: Prisma.ImportHeaderUpdateArgs
  ): Promise<PrismaImportHeader> {
    return this.prisma.importHeader.update(args);
  }
  async deleteImportHeader(
    args: Prisma.ImportHeaderDeleteArgs
  ): Promise<PrismaImportHeader> {
    return this.prisma.importHeader.delete(args);
  }
}
