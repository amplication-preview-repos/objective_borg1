/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ImportHeaderService } from "../importHeader.service";
import { ImportHeaderCreateInput } from "./ImportHeaderCreateInput";
import { ImportHeader } from "./ImportHeader";
import { ImportHeaderFindManyArgs } from "./ImportHeaderFindManyArgs";
import { ImportHeaderWhereUniqueInput } from "./ImportHeaderWhereUniqueInput";
import { ImportHeaderUpdateInput } from "./ImportHeaderUpdateInput";

export class ImportHeaderControllerBase {
  constructor(protected readonly service: ImportHeaderService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ImportHeader })
  async createImportHeader(
    @common.Body() data: ImportHeaderCreateInput
  ): Promise<ImportHeader> {
    return await this.service.createImportHeader({
      data: data,
      select: {
        action: true,
        b1DeclaSub1: true,
        b20DelivTermsSub1: true,
        b20DelivTermsSub2: true,
        b20DelivTermsSub3: true,
        b22CurrencyCode: true,
        b22TotalAmount: true,
        b25BorderTrans: true,
        b26InlandTrans: true,
        b27PlaceOfLoading: true,
        b48DeferredPay: true,
        b5Items: true,
        b9TotalFreight: true,
        b9TotalInsurance: true,
        box47CdPayMethod: true,
        boxaOfficeCode: true,
        boxaOfficeSubCode: true,
        cdGuaranteeMethod: true,
        createdAt: true,
        direction: true,
        id: true,
        information: true,
        moduleField: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ImportHeader] })
  @ApiNestedQuery(ImportHeaderFindManyArgs)
  async importHeaders(@common.Req() request: Request): Promise<ImportHeader[]> {
    const args = plainToClass(ImportHeaderFindManyArgs, request.query);
    return this.service.importHeaders({
      ...args,
      select: {
        action: true,
        b1DeclaSub1: true,
        b20DelivTermsSub1: true,
        b20DelivTermsSub2: true,
        b20DelivTermsSub3: true,
        b22CurrencyCode: true,
        b22TotalAmount: true,
        b25BorderTrans: true,
        b26InlandTrans: true,
        b27PlaceOfLoading: true,
        b48DeferredPay: true,
        b5Items: true,
        b9TotalFreight: true,
        b9TotalInsurance: true,
        box47CdPayMethod: true,
        boxaOfficeCode: true,
        boxaOfficeSubCode: true,
        cdGuaranteeMethod: true,
        createdAt: true,
        direction: true,
        id: true,
        information: true,
        moduleField: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ImportHeader })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async importHeader(
    @common.Param() params: ImportHeaderWhereUniqueInput
  ): Promise<ImportHeader | null> {
    const result = await this.service.importHeader({
      where: params,
      select: {
        action: true,
        b1DeclaSub1: true,
        b20DelivTermsSub1: true,
        b20DelivTermsSub2: true,
        b20DelivTermsSub3: true,
        b22CurrencyCode: true,
        b22TotalAmount: true,
        b25BorderTrans: true,
        b26InlandTrans: true,
        b27PlaceOfLoading: true,
        b48DeferredPay: true,
        b5Items: true,
        b9TotalFreight: true,
        b9TotalInsurance: true,
        box47CdPayMethod: true,
        boxaOfficeCode: true,
        boxaOfficeSubCode: true,
        cdGuaranteeMethod: true,
        createdAt: true,
        direction: true,
        id: true,
        information: true,
        moduleField: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ImportHeader })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateImportHeader(
    @common.Param() params: ImportHeaderWhereUniqueInput,
    @common.Body() data: ImportHeaderUpdateInput
  ): Promise<ImportHeader | null> {
    try {
      return await this.service.updateImportHeader({
        where: params,
        data: data,
        select: {
          action: true,
          b1DeclaSub1: true,
          b20DelivTermsSub1: true,
          b20DelivTermsSub2: true,
          b20DelivTermsSub3: true,
          b22CurrencyCode: true,
          b22TotalAmount: true,
          b25BorderTrans: true,
          b26InlandTrans: true,
          b27PlaceOfLoading: true,
          b48DeferredPay: true,
          b5Items: true,
          b9TotalFreight: true,
          b9TotalInsurance: true,
          box47CdPayMethod: true,
          boxaOfficeCode: true,
          boxaOfficeSubCode: true,
          cdGuaranteeMethod: true,
          createdAt: true,
          direction: true,
          id: true,
          information: true,
          moduleField: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ImportHeader })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteImportHeader(
    @common.Param() params: ImportHeaderWhereUniqueInput
  ): Promise<ImportHeader | null> {
    try {
      return await this.service.deleteImportHeader({
        where: params,
        select: {
          action: true,
          b1DeclaSub1: true,
          b20DelivTermsSub1: true,
          b20DelivTermsSub2: true,
          b20DelivTermsSub3: true,
          b22CurrencyCode: true,
          b22TotalAmount: true,
          b25BorderTrans: true,
          b26InlandTrans: true,
          b27PlaceOfLoading: true,
          b48DeferredPay: true,
          b5Items: true,
          b9TotalFreight: true,
          b9TotalInsurance: true,
          box47CdPayMethod: true,
          boxaOfficeCode: true,
          boxaOfficeSubCode: true,
          cdGuaranteeMethod: true,
          createdAt: true,
          direction: true,
          id: true,
          information: true,
          moduleField: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
