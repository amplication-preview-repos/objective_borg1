/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ImportHeader } from "./ImportHeader";
import { ImportHeaderCountArgs } from "./ImportHeaderCountArgs";
import { ImportHeaderFindManyArgs } from "./ImportHeaderFindManyArgs";
import { ImportHeaderFindUniqueArgs } from "./ImportHeaderFindUniqueArgs";
import { CreateImportHeaderArgs } from "./CreateImportHeaderArgs";
import { UpdateImportHeaderArgs } from "./UpdateImportHeaderArgs";
import { DeleteImportHeaderArgs } from "./DeleteImportHeaderArgs";
import { ImportHeaderService } from "../importHeader.service";
@graphql.Resolver(() => ImportHeader)
export class ImportHeaderResolverBase {
  constructor(protected readonly service: ImportHeaderService) {}

  async _importHeadersMeta(
    @graphql.Args() args: ImportHeaderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ImportHeader])
  async importHeaders(
    @graphql.Args() args: ImportHeaderFindManyArgs
  ): Promise<ImportHeader[]> {
    return this.service.importHeaders(args);
  }

  @graphql.Query(() => ImportHeader, { nullable: true })
  async importHeader(
    @graphql.Args() args: ImportHeaderFindUniqueArgs
  ): Promise<ImportHeader | null> {
    const result = await this.service.importHeader(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ImportHeader)
  async createImportHeader(
    @graphql.Args() args: CreateImportHeaderArgs
  ): Promise<ImportHeader> {
    return await this.service.createImportHeader({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ImportHeader)
  async updateImportHeader(
    @graphql.Args() args: UpdateImportHeaderArgs
  ): Promise<ImportHeader | null> {
    try {
      return await this.service.updateImportHeader({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ImportHeader)
  async deleteImportHeader(
    @graphql.Args() args: DeleteImportHeaderArgs
  ): Promise<ImportHeader | null> {
    try {
      return await this.service.deleteImportHeader(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
