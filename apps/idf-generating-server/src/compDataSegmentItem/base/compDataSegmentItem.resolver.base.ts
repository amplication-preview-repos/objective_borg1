/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CompDataSegmentItem } from "./CompDataSegmentItem";
import { CompDataSegmentItemCountArgs } from "./CompDataSegmentItemCountArgs";
import { CompDataSegmentItemFindManyArgs } from "./CompDataSegmentItemFindManyArgs";
import { CompDataSegmentItemFindUniqueArgs } from "./CompDataSegmentItemFindUniqueArgs";
import { CreateCompDataSegmentItemArgs } from "./CreateCompDataSegmentItemArgs";
import { UpdateCompDataSegmentItemArgs } from "./UpdateCompDataSegmentItemArgs";
import { DeleteCompDataSegmentItemArgs } from "./DeleteCompDataSegmentItemArgs";
import { CompDataSegmentItemService } from "../compDataSegmentItem.service";
@graphql.Resolver(() => CompDataSegmentItem)
export class CompDataSegmentItemResolverBase {
  constructor(protected readonly service: CompDataSegmentItemService) {}

  async _compDataSegmentItemsMeta(
    @graphql.Args() args: CompDataSegmentItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CompDataSegmentItem])
  async compDataSegmentItems(
    @graphql.Args() args: CompDataSegmentItemFindManyArgs
  ): Promise<CompDataSegmentItem[]> {
    return this.service.compDataSegmentItems(args);
  }

  @graphql.Query(() => CompDataSegmentItem, { nullable: true })
  async compDataSegmentItem(
    @graphql.Args() args: CompDataSegmentItemFindUniqueArgs
  ): Promise<CompDataSegmentItem | null> {
    const result = await this.service.compDataSegmentItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CompDataSegmentItem)
  async createCompDataSegmentItem(
    @graphql.Args() args: CreateCompDataSegmentItemArgs
  ): Promise<CompDataSegmentItem> {
    return await this.service.createCompDataSegmentItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CompDataSegmentItem)
  async updateCompDataSegmentItem(
    @graphql.Args() args: UpdateCompDataSegmentItemArgs
  ): Promise<CompDataSegmentItem | null> {
    try {
      return await this.service.updateCompDataSegmentItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CompDataSegmentItem)
  async deleteCompDataSegmentItem(
    @graphql.Args() args: DeleteCompDataSegmentItemArgs
  ): Promise<CompDataSegmentItem | null> {
    try {
      return await this.service.deleteCompDataSegmentItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
