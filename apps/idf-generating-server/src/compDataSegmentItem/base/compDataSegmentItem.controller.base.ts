/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CompDataSegmentItemService } from "../compDataSegmentItem.service";
import { CompDataSegmentItemCreateInput } from "./CompDataSegmentItemCreateInput";
import { CompDataSegmentItem } from "./CompDataSegmentItem";
import { CompDataSegmentItemFindManyArgs } from "./CompDataSegmentItemFindManyArgs";
import { CompDataSegmentItemWhereUniqueInput } from "./CompDataSegmentItemWhereUniqueInput";
import { CompDataSegmentItemUpdateInput } from "./CompDataSegmentItemUpdateInput";

export class CompDataSegmentItemControllerBase {
  constructor(protected readonly service: CompDataSegmentItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CompDataSegmentItem })
  async createCompDataSegmentItem(
    @common.Body() data: CompDataSegmentItemCreateInput
  ): Promise<CompDataSegmentItem> {
    return await this.service.createCompDataSegmentItem({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CompDataSegmentItem] })
  @ApiNestedQuery(CompDataSegmentItemFindManyArgs)
  async compDataSegmentItems(
    @common.Req() request: Request
  ): Promise<CompDataSegmentItem[]> {
    const args = plainToClass(CompDataSegmentItemFindManyArgs, request.query);
    return this.service.compDataSegmentItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CompDataSegmentItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async compDataSegmentItem(
    @common.Param() params: CompDataSegmentItemWhereUniqueInput
  ): Promise<CompDataSegmentItem | null> {
    const result = await this.service.compDataSegmentItem({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CompDataSegmentItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCompDataSegmentItem(
    @common.Param() params: CompDataSegmentItemWhereUniqueInput,
    @common.Body() data: CompDataSegmentItemUpdateInput
  ): Promise<CompDataSegmentItem | null> {
    try {
      return await this.service.updateCompDataSegmentItem({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CompDataSegmentItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCompDataSegmentItem(
    @common.Param() params: CompDataSegmentItemWhereUniqueInput
  ): Promise<CompDataSegmentItem | null> {
    try {
      return await this.service.deleteCompDataSegmentItem({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
