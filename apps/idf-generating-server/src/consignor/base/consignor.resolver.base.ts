/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Consignor } from "./Consignor";
import { ConsignorCountArgs } from "./ConsignorCountArgs";
import { ConsignorFindManyArgs } from "./ConsignorFindManyArgs";
import { ConsignorFindUniqueArgs } from "./ConsignorFindUniqueArgs";
import { CreateConsignorArgs } from "./CreateConsignorArgs";
import { UpdateConsignorArgs } from "./UpdateConsignorArgs";
import { DeleteConsignorArgs } from "./DeleteConsignorArgs";
import { ConsignorService } from "../consignor.service";
@graphql.Resolver(() => Consignor)
export class ConsignorResolverBase {
  constructor(protected readonly service: ConsignorService) {}

  async _consignorsMeta(
    @graphql.Args() args: ConsignorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Consignor])
  async consignors(
    @graphql.Args() args: ConsignorFindManyArgs
  ): Promise<Consignor[]> {
    return this.service.consignors(args);
  }

  @graphql.Query(() => Consignor, { nullable: true })
  async consignor(
    @graphql.Args() args: ConsignorFindUniqueArgs
  ): Promise<Consignor | null> {
    const result = await this.service.consignor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Consignor)
  async createConsignor(
    @graphql.Args() args: CreateConsignorArgs
  ): Promise<Consignor> {
    return await this.service.createConsignor({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Consignor)
  async updateConsignor(
    @graphql.Args() args: UpdateConsignorArgs
  ): Promise<Consignor | null> {
    try {
      return await this.service.updateConsignor({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Consignor)
  async deleteConsignor(
    @graphql.Args() args: DeleteConsignorArgs
  ): Promise<Consignor | null> {
    try {
      return await this.service.deleteConsignor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
