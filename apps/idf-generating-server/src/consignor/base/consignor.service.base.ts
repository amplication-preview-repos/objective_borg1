/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Consignor as PrismaConsignor } from "@prisma/client";

export class ConsignorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConsignorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.consignor.count(args);
  }

  async consignors(
    args: Prisma.ConsignorFindManyArgs
  ): Promise<PrismaConsignor[]> {
    return this.prisma.consignor.findMany(args);
  }
  async consignor(
    args: Prisma.ConsignorFindUniqueArgs
  ): Promise<PrismaConsignor | null> {
    return this.prisma.consignor.findUnique(args);
  }
  async createConsignor(
    args: Prisma.ConsignorCreateArgs
  ): Promise<PrismaConsignor> {
    return this.prisma.consignor.create(args);
  }
  async updateConsignor(
    args: Prisma.ConsignorUpdateArgs
  ): Promise<PrismaConsignor> {
    return this.prisma.consignor.update(args);
  }
  async deleteConsignor(
    args: Prisma.ConsignorDeleteArgs
  ): Promise<PrismaConsignor> {
    return this.prisma.consignor.delete(args);
  }
}
