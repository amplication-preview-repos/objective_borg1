/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ConsignorService } from "../consignor.service";
import { ConsignorCreateInput } from "./ConsignorCreateInput";
import { Consignor } from "./Consignor";
import { ConsignorFindManyArgs } from "./ConsignorFindManyArgs";
import { ConsignorWhereUniqueInput } from "./ConsignorWhereUniqueInput";
import { ConsignorUpdateInput } from "./ConsignorUpdateInput";

export class ConsignorControllerBase {
  constructor(protected readonly service: ConsignorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Consignor })
  async createConsignor(
    @common.Body() data: ConsignorCreateInput
  ): Promise<Consignor> {
    return await this.service.createConsignor({
      data: data,
      select: {
        businessaddr: true,
        businessname: true,
        businessnation: true,
        createdAt: true,
        id: true,
        registered: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Consignor] })
  @ApiNestedQuery(ConsignorFindManyArgs)
  async consignors(@common.Req() request: Request): Promise<Consignor[]> {
    const args = plainToClass(ConsignorFindManyArgs, request.query);
    return this.service.consignors({
      ...args,
      select: {
        businessaddr: true,
        businessname: true,
        businessnation: true,
        createdAt: true,
        id: true,
        registered: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Consignor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async consignor(
    @common.Param() params: ConsignorWhereUniqueInput
  ): Promise<Consignor | null> {
    const result = await this.service.consignor({
      where: params,
      select: {
        businessaddr: true,
        businessname: true,
        businessnation: true,
        createdAt: true,
        id: true,
        registered: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Consignor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateConsignor(
    @common.Param() params: ConsignorWhereUniqueInput,
    @common.Body() data: ConsignorUpdateInput
  ): Promise<Consignor | null> {
    try {
      return await this.service.updateConsignor({
        where: params,
        data: data,
        select: {
          businessaddr: true,
          businessname: true,
          businessnation: true,
          createdAt: true,
          id: true,
          registered: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Consignor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteConsignor(
    @common.Param() params: ConsignorWhereUniqueInput
  ): Promise<Consignor | null> {
    try {
      return await this.service.deleteConsignor({
        where: params,
        select: {
          businessaddr: true,
          businessname: true,
          businessnation: true,
          createdAt: true,
          id: true,
          registered: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
