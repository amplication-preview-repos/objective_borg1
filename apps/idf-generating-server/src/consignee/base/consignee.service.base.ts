/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Consignee as PrismaConsignee } from "@prisma/client";

export class ConsigneeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConsigneeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.consignee.count(args);
  }

  async consignees(
    args: Prisma.ConsigneeFindManyArgs
  ): Promise<PrismaConsignee[]> {
    return this.prisma.consignee.findMany(args);
  }
  async consignee(
    args: Prisma.ConsigneeFindUniqueArgs
  ): Promise<PrismaConsignee | null> {
    return this.prisma.consignee.findUnique(args);
  }
  async createConsignee(
    args: Prisma.ConsigneeCreateArgs
  ): Promise<PrismaConsignee> {
    return this.prisma.consignee.create(args);
  }
  async updateConsignee(
    args: Prisma.ConsigneeUpdateArgs
  ): Promise<PrismaConsignee> {
    return this.prisma.consignee.update(args);
  }
  async deleteConsignee(
    args: Prisma.ConsigneeDeleteArgs
  ): Promise<PrismaConsignee> {
    return this.prisma.consignee.delete(args);
  }
}
