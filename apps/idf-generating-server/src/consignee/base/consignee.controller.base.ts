/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ConsigneeService } from "../consignee.service";
import { ConsigneeCreateInput } from "./ConsigneeCreateInput";
import { Consignee } from "./Consignee";
import { ConsigneeFindManyArgs } from "./ConsigneeFindManyArgs";
import { ConsigneeWhereUniqueInput } from "./ConsigneeWhereUniqueInput";
import { ConsigneeUpdateInput } from "./ConsigneeUpdateInput";

export class ConsigneeControllerBase {
  constructor(protected readonly service: ConsigneeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Consignee })
  async createConsignee(
    @common.Body() data: ConsigneeCreateInput
  ): Promise<Consignee> {
    return await this.service.createConsignee({
      data: data,
      select: {
        createdAt: true,
        id: true,
        registered: true,
        trnumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Consignee] })
  @ApiNestedQuery(ConsigneeFindManyArgs)
  async consignees(@common.Req() request: Request): Promise<Consignee[]> {
    const args = plainToClass(ConsigneeFindManyArgs, request.query);
    return this.service.consignees({
      ...args,
      select: {
        createdAt: true,
        id: true,
        registered: true,
        trnumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Consignee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async consignee(
    @common.Param() params: ConsigneeWhereUniqueInput
  ): Promise<Consignee | null> {
    const result = await this.service.consignee({
      where: params,
      select: {
        createdAt: true,
        id: true,
        registered: true,
        trnumber: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Consignee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateConsignee(
    @common.Param() params: ConsigneeWhereUniqueInput,
    @common.Body() data: ConsigneeUpdateInput
  ): Promise<Consignee | null> {
    try {
      return await this.service.updateConsignee({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          registered: true,
          trnumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Consignee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteConsignee(
    @common.Param() params: ConsigneeWhereUniqueInput
  ): Promise<Consignee | null> {
    try {
      return await this.service.deleteConsignee({
        where: params,
        select: {
          createdAt: true,
          id: true,
          registered: true,
          trnumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
